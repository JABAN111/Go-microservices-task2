// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: proto/petname.proto

package petname

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PetnameGenerator_Ping_FullMethodName         = "/hello.PetnameGenerator/Ping"
	PetnameGenerator_Generate_FullMethodName     = "/hello.PetnameGenerator/Generate"
	PetnameGenerator_GenerateMany_FullMethodName = "/hello.PetnameGenerator/GenerateMany"
)

// PetnameGeneratorClient is the client API for PetnameGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service
type PetnameGeneratorClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Send number of words and separator, receive pet name
	Generate(ctx context.Context, in *PetnameRequest, opts ...grpc.CallOption) (*PetnameResponse, error)
	// Send number of words, separator and count of animals, receive pet names
	GenerateMany(ctx context.Context, in *PetnameStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PetnameResponse], error)
}

type petnameGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewPetnameGeneratorClient(cc grpc.ClientConnInterface) PetnameGeneratorClient {
	return &petnameGeneratorClient{cc}
}

func (c *petnameGeneratorClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PetnameGenerator_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petnameGeneratorClient) Generate(ctx context.Context, in *PetnameRequest, opts ...grpc.CallOption) (*PetnameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PetnameResponse)
	err := c.cc.Invoke(ctx, PetnameGenerator_Generate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petnameGeneratorClient) GenerateMany(ctx context.Context, in *PetnameStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PetnameResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PetnameGenerator_ServiceDesc.Streams[0], PetnameGenerator_GenerateMany_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PetnameStreamRequest, PetnameResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PetnameGenerator_GenerateManyClient = grpc.ServerStreamingClient[PetnameResponse]

// PetnameGeneratorServer is the server API for PetnameGenerator service.
// All implementations must embed UnimplementedPetnameGeneratorServer
// for forward compatibility.
//
// Service
type PetnameGeneratorServer interface {
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Send number of words and separator, receive pet name
	Generate(context.Context, *PetnameRequest) (*PetnameResponse, error)
	// Send number of words, separator and count of animals, receive pet names
	GenerateMany(*PetnameStreamRequest, grpc.ServerStreamingServer[PetnameResponse]) error
	mustEmbedUnimplementedPetnameGeneratorServer()
}

// UnimplementedPetnameGeneratorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPetnameGeneratorServer struct{}

func (UnimplementedPetnameGeneratorServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedPetnameGeneratorServer) Generate(context.Context, *PetnameRequest) (*PetnameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedPetnameGeneratorServer) GenerateMany(*PetnameStreamRequest, grpc.ServerStreamingServer[PetnameResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GenerateMany not implemented")
}
func (UnimplementedPetnameGeneratorServer) mustEmbedUnimplementedPetnameGeneratorServer() {}
func (UnimplementedPetnameGeneratorServer) testEmbeddedByValue()                          {}

// UnsafePetnameGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PetnameGeneratorServer will
// result in compilation errors.
type UnsafePetnameGeneratorServer interface {
	mustEmbedUnimplementedPetnameGeneratorServer()
}

func RegisterPetnameGeneratorServer(s grpc.ServiceRegistrar, srv PetnameGeneratorServer) {
	// If the following call pancis, it indicates UnimplementedPetnameGeneratorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PetnameGenerator_ServiceDesc, srv)
}

func _PetnameGenerator_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetnameGeneratorServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetnameGenerator_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetnameGeneratorServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetnameGenerator_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PetnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetnameGeneratorServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetnameGenerator_Generate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetnameGeneratorServer).Generate(ctx, req.(*PetnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetnameGenerator_GenerateMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PetnameStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PetnameGeneratorServer).GenerateMany(m, &grpc.GenericServerStream[PetnameStreamRequest, PetnameResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PetnameGenerator_GenerateManyServer = grpc.ServerStreamingServer[PetnameResponse]

// PetnameGenerator_ServiceDesc is the grpc.ServiceDesc for PetnameGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PetnameGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hello.PetnameGenerator",
	HandlerType: (*PetnameGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _PetnameGenerator_Ping_Handler,
		},
		{
			MethodName: "Generate",
			Handler:    _PetnameGenerator_Generate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateMany",
			Handler:       _PetnameGenerator_GenerateMany_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/petname.proto",
}
